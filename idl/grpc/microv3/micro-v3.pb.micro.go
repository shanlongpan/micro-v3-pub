// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: idl/micro-v3.proto

package microv3

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MicroV3Service service

func NewMicroV3ServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MicroV3Service service

type MicroV3Service interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (MicroV3Service_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (MicroV3Service_PingPongService, error)
}

type microV3Service struct {
	c    client.Client
	name string
}

func NewMicroV3Service(name string, c client.Client) MicroV3Service {
	return &microV3Service{
		c:    c,
		name: name,
	}
}

func (c *microV3Service) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "MicroV3Service.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microV3Service) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (MicroV3Service_StreamService, error) {
	req := c.c.NewRequest(c.name, "MicroV3Service.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &microV3ServiceStream{stream}, nil
}

type MicroV3Service_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type microV3ServiceStream struct {
	stream client.Stream
}

func (x *microV3ServiceStream) Close() error {
	return x.stream.Close()
}

func (x *microV3ServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microV3ServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microV3ServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microV3ServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *microV3Service) PingPong(ctx context.Context, opts ...client.CallOption) (MicroV3Service_PingPongService, error) {
	req := c.c.NewRequest(c.name, "MicroV3Service.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &microV3ServicePingPong{stream}, nil
}

type MicroV3Service_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type microV3ServicePingPong struct {
	stream client.Stream
}

func (x *microV3ServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *microV3ServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *microV3ServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microV3ServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microV3ServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *microV3ServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MicroV3Service service

type MicroV3ServiceHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	Stream(context.Context, *StreamingRequest, MicroV3Service_StreamStream) error
	PingPong(context.Context, MicroV3Service_PingPongStream) error
}

func RegisterMicroV3ServiceHandler(s server.Server, hdlr MicroV3ServiceHandler, opts ...server.HandlerOption) error {
	type microV3Service interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type MicroV3Service struct {
		microV3Service
	}
	h := &microV3ServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MicroV3Service{h}, opts...))
}

type microV3ServiceHandler struct {
	MicroV3ServiceHandler
}

func (h *microV3ServiceHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.MicroV3ServiceHandler.Call(ctx, in, out)
}

func (h *microV3ServiceHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MicroV3ServiceHandler.Stream(ctx, m, &microV3ServiceStreamStream{stream})
}

type MicroV3Service_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type microV3ServiceStreamStream struct {
	stream server.Stream
}

func (x *microV3ServiceStreamStream) Close() error {
	return x.stream.Close()
}

func (x *microV3ServiceStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microV3ServiceStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microV3ServiceStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microV3ServiceStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *microV3ServiceHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.MicroV3ServiceHandler.PingPong(ctx, &microV3ServicePingPongStream{stream})
}

type MicroV3Service_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type microV3ServicePingPongStream struct {
	stream server.Stream
}

func (x *microV3ServicePingPongStream) Close() error {
	return x.stream.Close()
}

func (x *microV3ServicePingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *microV3ServicePingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *microV3ServicePingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *microV3ServicePingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *microV3ServicePingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
